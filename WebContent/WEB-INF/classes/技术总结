系统实现目标：
	仿电商类较小型交易系统，支持一定的并发访问压力以及互联网安全性能。
	
框架选取：
	controller：springMVC
	orm：mybatis
	spring
	缓存：memcached
	数据库：mysql
	数据库连接池：tomcat-jdbc-pool
	
	*spring整合mybatis需要一个jar包mybatis-spring-1.2.1.jar
	
web工程目录
	把页面资源文件只能放在webContent下面,如 CSS,JS,image等.放在WEB-INF下引用不了。
关于jsp文件应不应该放在WEB-INF下的思考:
	通过设置过滤器，放在webroot下面的文件也可以实现不能直接访问。所以说放在哪里就看习惯是什么样了。
	一般项目都是要求隐藏性的，只让客户通过请求访问而不是直接访问jsp页面。若放在webroot下面，肯定要加一个过滤器阻止所有对*.jsp的访问。只要比较的话：
	放在webroot下面:优点，程序结构清晰，便于编码和维护；缺点，要加过滤器。
	放在web-inf下面：优点，不用过滤器；缺点，打乱了程序结构，编码和维护麻烦
		
	个人倾向于jsp放在webContent下增加过滤器控制访问.这样开发和维护成本底
	
	安全性不是真正的原因，因为jsp是要解析后才显示到浏览器的，即使用户知道你jsp的路径，也不可能通过浏览器看到jsp源码的，而如果是通过其它手段入侵服务器的话，
	放在WEB-INF又和放在别的地方有什么区别呢？？？
	真正的原因是，对于早期直接嵌入Java代码的jsp，是直接给出jsp路径给用户访问的，这种情况恰恰不能放在WEB-INF，而到了现在的mvc模式，
	jsp已经不是曾经那个包含完整逻辑的jsp，而仅仅充当view层的模板，必须要填入model数据后进行渲染，才能生成可读的页面，
	这样的模板是不能让用户直接访问的，直接访问的话要么是一堆各种空白，或者一堆占位符，甚至一堆NullPointException，
	所以需要放到WEB-INF里。补充一下，“安全性问题”指的是“不允许你访问，否则会对我不好”，而这里的情况其实是“不建议你访问，否则会对你不好”，
	应该属于健壮性的范畴。
系统模块
	1.登录
		技术点：ajax | jquery | token机制(表单重复提交)
	